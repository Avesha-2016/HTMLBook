<?xml version="1.0" encoding="UTF-8"?>

<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
               xmlns:functx="http://www.functx.com"
	       xmlns="http://www.w3.org/1999/xhtml"
	       xmlns:ncx="http://www.daisy.org/z3986/2005/ncx/"
	       xmlns:h="http://www.w3.org/1999/xhtml"
	       xmlns:e="http://github.com/oreillymedia/epubrenderer"
               stylesheet="../htmlbook.xsl">

  <!-- Tests around text nodes for formal XREF elements (those with data-type='xref') -->
  <x:scenario label="When *empty* XREF element is matched">
    <x:context select="(//h:section//h:a[@data-type='xref'])[1]">
      <section id="chapter1" data-type="chapter">
	<p>Here comes a cross-reference: see <a data-type="xref" href="#chapter1"/></p>
      </section>
    </x:context>
    
    <x:scenario label="And autogenerate-xrefs param is disabled">
      <x:context>
	<x:param name="autogenerate-xrefs" select="0"/>
      </x:context>
      <x:expect label="No XREF text node should be generated">
	<a data-type="xref" href="#chapter1"/>
      </x:expect>
    </x:scenario>
    
    <x:scenario label="And autogenerate-xrefs param is enabled">
      <x:context>
	<x:param name="autogenerate-xrefs" select="1"/>
      </x:context>
      <!-- Content based on params set globally for this spec doc and localization gentext -->
      <!-- If localizations change, test may produce false negative -->
      <x:expect label="XREF text node should be generated with proper content">
	<a data-type="xref" href="#chapter1">Chapter 1</a>
      </x:expect>
    </x:scenario>    
  </x:scenario>

  <x:scenario label="When *nonempty* XREF element is matched">
    <x:context select="(//h:section//h:a[@data-type='xref'])[1]">
      <section id="chapter1" data-type="chapter">
	<p>Here comes a cross-reference: see <a data-type="xref" href="#chapter1">PLACEHOLDER</a></p>
      </section>
    </x:context>
    
    <x:scenario label="And autogenerate-xrefs param is disabled">
      <x:context>
	<x:param name="autogenerate-xrefs" select="0"/>
      </x:context>
      <x:expect label="No XREF text node should be generated">
	<a data-type="xref" href="#chapter1">PLACEHOLDER</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And autogenerate-xrefs param is enabled">
      <x:context>
	<x:param name="autogenerate-xrefs" select="1"/>
      </x:context>
      <!-- Content based on params set globally for this spec doc and localization gentext -->
      <!-- If localizations change, test may produce false negative -->
      <x:expect label="XREF text node should be generated with proper content">
	<a data-type="xref" href="#chapter1">Chapter 1</a>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <x:scenario label="When an XREF points to an id in another location">
    <x:context>
      <section id="chapter1" data-type="chapter">
	<p>Here comes an XREF with an href pointing to another file: <a data-type="xref" id="empty_another_file" href="ch01.html#chapter1"/></p>
	<p>Another XREF with an href pointing to another file: <a data-type="xref" id="nonempty_another_file" href="ch01.html#chapter1">PLACEHOLDER</a></p>
	<p>XREF pointing to a URL <a data-type="xref" id="empty_web_url" href="http://oreilly.com/index.html#chapter1"/></p>
	<p>Another XREF with an href pointing to another file: <a data-type="xref" id="nonempty_web_url" href="http://oreilly.com/index.html#chapter1">PLACEHOLDER</a></p>
      </section>
    </x:context>

    <x:scenario label="Which is another local file (text node of XREF empty)">
      <x:context select="//h:a[@id='empty_another_file']"/>
      <!-- Content based on params set globally for this spec doc and localization gentext -->
      <!-- If localizations change, test may produce false negative -->
      <x:expect label="XREF text node should be generated with proper content">
	<a data-type="xref" id="empty_another_file" href="...">Chapter 1</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Which is another local file (text node of XREF nonempty)">
      <x:context select="//h:a[@id='nonempty_another_file']"/>
      <!-- Content based on params set globally for this spec doc and localization gentext -->
      <!-- If localizations change, test may produce false negative -->
      <x:expect label="XREF text node should be generated with proper content">
	<a data-type="xref" id="nonempty_another_file" href="...">Chapter 1</a>
      </x:expect>
    </x:scenario>

    <!-- For now, we're arguing that if the @href value is not a legit XREF, 
	 that should override the fact that data-type="xref" is on the <a> -->
    <x:scenario label="Which is a Web URL instead of a valid XREF (text node empty)">
      <x:context select="//h:a[@id='empty_web_url']"/>
      <x:expect label="XREF text node should be left untouched">
	<a data-type="xref" id="empty_web_url" href="http://oreilly.com/index.html#chapter1"/>
      </x:expect>
    </x:scenario>

    <x:scenario label="Which is a Web URL instead of a valid XREF (text node nonempty)">
      <x:context select="//h:a[@id='nonempty_web_url']"/>
      <x:expect label="XREF text node should be left untouched">
	<a data-type="xref" id="nonempty_web_url" href="http://oreilly.com/index.html#chapter1">PLACEHOLDER</a>
      </x:expect>
    </x:scenario>

  </x:scenario>


  <x:scenario label="When an XREF has a bogus href">
    <x:context>
      <section id="chapter1" data-type="chapter">
	<p>Here comes a bogus cross-reference: see <a data-type="xref" id="empty_bogus" href="#bogusbogus"/></p>
	<p>Another bogus cross-referece: see <a data-type="xref" id="empty_file_bogus" href="ch01.html#bogus"/></p>
	<p>Third bogus cross-reference: see <a data-type="xref" id="nonempty_bogus" href="#bogusbogus">I do believe this is bogus</a></p>
	<p>Fourth bogus cross-reference: See <a data-type="xref" id="nonempty_file_bogus" href="ch01.html#bogus">I do believe this is bogus</a></p>
      </section>
    </x:context>
    
    <x:scenario label="And an empty text node">
      <x:context select="//h:a[@id='empty_bogus']"/>
      <x:expect label="Three question marks should be used for text node">
	<a data-type="xref" id="empty_bogus" href="#bogusbogus">???</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Referencing another file and has an empty text node">
      <x:context select="//h:a[@id='empty_file_bogus']"/>
      <x:expect label="Three question marks should be used for text node">
	<a data-type="xref" id="empty_file_bogus" href="ch01.html#bogus">???</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="And a nonempty text node">
      <x:context select="//h:a[@id='nonempty_bogus']"/>
      <x:expect label="Three question marks should be used for text node">
	<a data-type="xref" id="nonempty_bogus" href="#bogusbogus">???</a>
      </x:expect>
    </x:scenario>

    <x:scenario label="Referencing another file and has a nonempty text node">
      <x:context select="//h:a[@id='nonempty_file_bogus']"/>
      <x:expect label="Three question marks should be used for text node">
	<a data-type="xref" id="nonempty_file_bogus" href="ch01.html#bogus">???</a>
      </x:expect>
    </x:scenario>
  </x:scenario>

  <!-- Tests for whether an HREF is considered to be an XREF (link within the same corpus) -->
  <x:scenario label="If an href starts with a '#'">
    <x:call template="href-is-xref">
      <x:param name="href-value" select="'#whatever'"/>
    </x:call>
    <x:expect label="It is considered to be an XREF">1</x:expect>
  </x:scenario>

  <x:scenario label="If an href contains a '://' scheme (http://)">
    <x:call template="href-is-xref">
      <x:param name="href-value" select="'http://oreilly.com'"/>
    </x:call>
    <x:expect label="It *is not* considered to be an XREF">0</x:expect>
  </x:scenario>

  <x:scenario label="If an href contains a '://' scheme (https://)">
    <x:call template="href-is-xref">
      <x:param name="href-value" select="'https://github.com'"/>
    </x:call>
    <x:expect label="It *is not* considered to be an XREF">0</x:expect>
  </x:scenario>

  <x:scenario label="If an href contains a '://' scheme (ftp://)">
    <x:call template="href-is-xref">
      <x:param name="href-value" select="'ftp://ftp.ora.com'"/>
    </x:call>
    <x:expect label="It *is not* considered to be an XREF">0</x:expect>
  </x:scenario>

  <x:scenario label="If an href contains a mailto: link">
    <x:call template="href-is-xref">
      <x:param name="href-value" select="'mailto:atlas@oreilly.com'"/>
    </x:call>
    <x:expect label="It *is not* considered to be an XREF">0</x:expect>
  </x:scenario>

  <x:scenario label="If an href contains a local fileref+id ref">
    <x:call template="href-is-xref">
      <x:param name="href-value" select="'ch01.html#cookies'"/>
    </x:call>
    <x:expect label="It is considered to be an XREF">1</x:expect>
  </x:scenario>

  <x:scenario label="If an href contains a local fileref (no id ref)">
    <x:call template="href-is-xref">
      <x:param name="href-value" select="'ch01.html'"/>
    </x:call>
    <x:expect label="It is considered to be an XREF">1</x:expect>
  </x:scenario>

  <x:scenario label="If an href contains any-old text but no URL scheme">
    <x:call template="href-is-xref">
      <x:param name="href-value" select="'i_guess_this_is_an_xref'"/>
    </x:call>
    <x:expect label="It is considered to be an XREF">1</x:expect>
  </x:scenario>

  <!-- Tests on text nodes for non data-type="xref" hrefs -->
  <!-- Tests for hrefs on all types of a elems -->
    <!-- Tests for a element without data-type="xref" to ensure @href is updated as desired -->
    <!-- Tests for a elements that have HREFs with a cross-reference (data-type="link" or href without a URL scheme and with a #) -->

</x:description>
